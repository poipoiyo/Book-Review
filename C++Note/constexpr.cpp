constexpr 和 const 都是 C++ 中用來宣告常數的關鍵字，但它們在用途和功能上有一些重要的差異：
constexpr 的用途
- 編譯期常數：constexpr 用來表示常數值在編譯期即可計算，例如數學運算或函式返回的值。因此，constexpr 提供了更強的編譯期檢查能力。
- 函式限定：除了可以修飾變數外，constexpr 還可以用於修飾函式，讓函式在編譯期就進行計算。如果函式的所有參數和運算都是編譯期可知的，那麼該函式的結果也將在編譯期決定。
- 性能優化：由於值在編譯期計算，執行期不需要重新計算，這可以提高性能。

const 的用途
- 限定值不可改變：const 宣告的變數在運行期時不可修改，但其值未必是在編譯期確定。例如：const int runtimeValue = someFunction();
上述例子中，runtimeValue 的值可能要到執行期才會知道。
- 指標限定：const 可以修飾指標，限制指標指向的內容或指標本身，例如：const int* ptr;  // 指向的內容不可改變
int* const ptr;  // 指標本身不可改變


差異
| 特性 | constexpr | const | 
| 編譯期計算能力 | 是，用於編譯期常數或函式 | 否，僅修飾執行期不可變的值 | 
| 修飾函式 | 支援 | 不支援 | 
| 性能優化 | 提供編譯期性能優化 | 無此功能 | 

