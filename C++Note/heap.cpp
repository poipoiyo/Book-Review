在C++中，stack（堆疊） 和 heap（堆積） 都是內存分配的區域，但它們有不同的用途和管理方式：
Stack（堆疊）
- 存儲類型：主要用於存放函數的局部變量、函數的參數，以及控制流資訊（比如返回地址）。
- 分配方式：由編譯器自動分配和釋放，當函數執行時，變量被分配到stack，函數結束後變量自動被回收。
- 速度：存取速度快，因為stack的分配和釋放是由CPU直接管理的。
- 大小：通常比heap小，且受系統的stack大小限制（可能會造成stack overflow）。
- 作用域：變量的生命週期受函數作用域限制，一旦超出範圍就會被回收。
Heap（堆積）
- 存儲類型：主要存放動態分配的內存（例如用 new 或 malloc 分配的變量）。
- 分配方式：由程式手動分配和釋放，需要開發者使用 delete 或 free 來釋放內存，否則可能導致記憶體洩漏（Memory Leak）。
- 速度：存取較慢，因為需要額外的開銷來管理內存分配。
- 大小：比stack大得多，適合存放大量數據或需要長時間保留的變量。
- 作用域：變量的生命週期可以跨函數存在，只要沒有被手動釋放就會一直存在。
對比
| 特性 | Stack（堆疊） | Heap（堆積） | 
| 分配方式 | 自動 | 手動 (new/malloc) | 
| 速度 | 快 | 慢 | 
| 空間大小 | 小 | 大 | 
| 生命週期 | 局部變量，函數內使用 | 手動管理，可跨函數使用 | 
| 可能問題 | Stack Overflow | Memory Leak | 


應用場景
- stack：適用於小型、短期存活的變量，如函數內的局部變量。
- heap：適用於大型數據結構，如動態數組、鏈表等，或長期存在的數據。

